const [state, dispatch] = useReducer(reducerFn, initialState);
state: l√† state hi·ªán t·∫°i.

dispatch: h√†m ƒë·ªÉ g·ª≠i h√†nh ƒë·ªông (action).

reducerFn: function nh·∫≠n state v√† action, tr·∫£ v·ªÅ state m·ªõi.

initialState: gi√° tr·ªã kh·ªüi t·∫°o.

Ti√™u ch√≠	useReducer (React)	createSlice (Redux Toolkit)
Scope	D√πng trong component	D√πng cho global state (Redux store)
T·ªëi ∆∞u cho	Logic c·ª•c b·ªô	Qu·∫£n l√Ω tr·∫°ng th√°i to√†n ·ª©ng d·ª•ng
T·ª± sinh action + reducer	‚ùå Kh√¥ng	‚úÖ C√≥
D·ªÖ test + t·ªï ch·ª©c code	Trung b√¨nh	‚úÖ D·ªÖ chia file, t√°ch ch·ª©c nƒÉng
üß† Khi n√†o d√πng createSlice?
Khi b·∫°n d√πng Redux ƒë·ªÉ qu·∫£n l√Ω global state (gi·ªè h√†ng, user login, theme...).

Khi mu·ªën code r√µ r√†ng, chia module d·ªÖ b·∫£o tr√¨.


Hook	Khi n√†o d√πng?	D√πng ƒë·ªÉ l√†m g√¨?
useCallback	Khi b·∫°n mu·ªën ghi nh·ªõ l·∫°i m·ªôt h√†m (function)	Tr√°nh vi·ªác t·∫°o l·∫°i function m·ªõi sau m·ªói l·∫ßn render (gi√∫p t·ªëi ∆∞u hi·ªáu su·∫•t, nh·∫•t l√† khi truy·ªÅn h√†m xu·ªëng props cho component con).
useMemo	Khi b·∫°n mu·ªën ghi nh·ªõ l·∫°i m·ªôt gi√° tr·ªã t√≠nh to√°n (value)	Tr√°nh vi·ªác t√≠nh to√°n l·∫°i nh·ªØng ph√©p t√≠nh n·∫∑ng ho·∫∑c l·∫∑p l·∫°i kh√¥ng c·∫ßn thi·∫øt sau m·ªói render.
√Åp v√†o code c·ªßa b·∫°n:
1. useCallback
const onDeleteItem = useCallback(() => {
  dispatch(deleteItemFromCartAction(deleteItem));
  setModalIsOpen(false);  
}, [deleteItem, dispatch]);
B·∫°n d√πng useCallback v√¨ onDeleteItem l√† m·ªôt function.

M·ªói l·∫ßn render, n·∫øu deleteItem v√† dispatch kh√¥ng thay ƒë·ªïi, th√¨ React kh√¥ng t·∫°o l·∫°i h√†m onDeleteItem m·ªõi.

‚ûî Gi√∫p t·ªëi ∆∞u khi b·∫°n truy·ªÅn onDeleteItem xu·ªëng Modal.

2. useMemo
const subTotal = useMemo(() => {
  let value = 0;
  cartItems?.forEach(element => {
    value += element?.subTotal;
  });
  return value?.toFixed(2);
}, [cartItems]);
B·∫°n d√πng useMemo v√¨ subTotal l√† m·ªôt gi√° tr·ªã (number d·∫°ng text sau .toFixed(2)).

M·ªói l·∫ßn cartItems thay ƒë·ªïi, m·ªõi t√≠nh l·∫°i t·ªïng ti·ªÅn.

N·∫øu cartItems kh√¥ng ƒë·ªïi, React x√†i l·∫°i gi√° tr·ªã c≈©, kh√¥ng t√≠nh l·∫°i, ti·∫øt ki·ªám hi·ªáu su·∫•t.

üëâ V·∫≠y t·ªïng k·∫øt n√®:
B·∫°n c√≥...	Th√¨ d√πng...
M·ªôt function c·∫ßn ghi nh·ªõ	useCallback
M·ªôt value (gi√° tr·ªã) c·∫ßn ghi nh·ªõ	useMemo
üí¨ M·∫πo nh·ªõ:
useCallback => callback (h√†m).
useMemo => memory (gi√° tr·ªã nh·ªõ).